import native stdlib.Number

/**
 * A wrapper for the primative number type.
 */
class Number
    /**
     * Adds this number to another number and returns the result.
     */
    native readonly Add(Number other) returns Number result
    
    /**
     * Subtracts another number from this number and returns the result.
     */
    native readonly Subtract(Number other) returns Number result
    
    /**
     * Multiplies this number to another number and returns the result.
     */
    native readonly Multiply(Number other) returns Number result
    
    /**
     * Divides another number from this number and returns the result.
     */
    native readonly Divide(Number other) returns Number result
    
    /**
     * Brings this number to the power of another number and returns the result.
     */
    native readonly Power(Number other) returns Number result
    
    /**
     * Divides another number from this number and returns the remainder.
     */
    native readonly Modulus(Number other) returns Number result
    
    /**
     * Rounds this number down to the nearest whole number and returns the result.
     */
    native readonly Floor() returns Number result
    
    /**
     * Rounds this number up to the nearest whole number and returns the result.
     */
    native readonly Ceil() returns Number result
    
    /**
     * Rounds this number up or down to the nearest whole number and returns the result.
     */
    native readonly Round() returns Number result
    
    /**
     * Gets the square root of this number and returns the result.
     */
    native readonly SquareRoot() returns Number result
    
    /**
     * Gets the natural log of this number and returns the result.
     */
    native readonly Log() returns Number result
    

usage antipattern AddToSelf
    a = any Number
    a.Add(a)

usage antipattern DivideFromSelf
    a = any Number
    a.Divide(a)

usage antipattern MultiplyToSelf
    a = any Number
    a.Multiply(a)

usage antipattern SubtractFromSelf
    a = any Number
    a.Subtract(a)

usage antipattern AddThenSubtract
    a = any Number
    b = any Number
    a.Add(b)
    a.Subtract(b)

usage antipattern SubtractThenAdd
    a = any Number
    b = any Number
    a.Subtract(b)
    a.Add(b)

usage antipattern MultiplyThenDivide
    a = any Number
    b = any Number
    a.Multiply(b)
    a.Divide(b)

usage antipattern DivideThenMultiply
    a = any Number
    b = any Number
    a.Divide(b)
    a.Multiply(b)

usage antipattern AddTwice
    a = any Number
    b = any Number
    
    a.Add(b)
    a.Add(b)

usage antipattern MultiplyTwice
    a = any Number
    b = any Number
    
    a.Multiply(b)
    a.Multiply(b)
    
usage antipattern SubtractTwice
    a = any Number
    b = any Number
    
    a.Subtract(b)
    a.Subtract(b)

usage antipattern DivideTwice
    a = any Number
    b = any Number
    
    a.Divide(b)
    a.Divide(b)

usage antipattern ModulusTwice
    a = any Number
    b = any Number
    
    a.Modulus(b)
    a.Modulus(b)
